// Gradle 경고 메시지 완전 해결 버전

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
}

group = 'com.neeis'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// Gradle Wrapper 설정
wrapper {
    gradleVersion = '8.8'
    distributionType = Wrapper.DistributionType.ALL
}

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('jacocoReport')
}

// SonarQube 설정 (모든 경고 해결)
sonar {
    properties {
        property "sonar.projectKey", "neeis-project"
        property "sonar.projectName", "NEEIS Project"
        property "sonar.host.url", "http://localhost:9000"

        // 컴파일 skip 설정 (경고 해결)
        property "sonar.gradle.skipCompile", "true"

        // 소스 코드 경로 설정
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"

        // 최신 경로 API 사용
        property "sonar.coverage.jacoco.xmlReportPaths",
                layout.buildDirectory.file("jacocoReport/test/jacocoTestReport.xml").get().asFile.absolutePath

        property "sonar.junit.reportPaths",
                layout.buildDirectory.dir("test-results/test").get().asFile.absolutePath

        property "sonar.java.binaries",
                layout.buildDirectory.dir("classes/java/main").get().asFile.absolutePath

        property "sonar.java.test.binaries",
                layout.buildDirectory.dir("classes/java/test").get().asFile.absolutePath

        // 제외 패턴
        property "sonar.exclusions", [
                "**/dto/**/*",
                "**/global/common/**/*",
                "**/*Application.java",
                "**/exception/**/*",
                "**/config/**/*",
                "**/Q*.java",
                "**/report/**/*",
                "**/fcm/**/*",
                "**/notification/**/*"
        ].join(",")

        property "sonar.coverage.exclusions", [
                "**/dto/**/*",
                "**/global/common/**/*",
                "**/*Application.java",
                "**/exception/**/*",
                "**/config/**/*",
                "**/Q*.java",
                "**/report/**/*",
                "**/fcm/**/*",
                "**/notification/**/*"
        ].join(",")

        // Quality Gate 설정
        property "sonar.qualitygate.wait", "false"

        // 언어 및 인코딩
        property "sonar.java.source", "21"
        property "sonar.sourceEncoding", "UTF-8"
    }
}

// 의존성은 동일...
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-test'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'com.google.firebase:firebase-admin:9.4.3'
    implementation 'org.apache.poi:poi:5.2.5'
    implementation 'org.apache.poi:poi-ooxml:5.2.5'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'com.itextpdf:layout:7.2.5'
    implementation 'com.itextpdf:kernel:7.2.5'
    implementation 'com.itextpdf:io:7.2.5'
    implementation 'com.itextpdf:font-asian:7.2.5'
}

// 테스트 설정 (최신 API 사용)
tasks.named('test') {
    useJUnitPlatform()
    finalizedBy tasks.jacocoTestReport

    // 테스트 실패해도 리포트는 생성
    ignoreFailures = true

    // 테스트 결과 XML 생성
    reports {
        junitXml.required = true
        html.required = true
    }

    systemProperty 'file.encoding', 'UTF-8'
}

// JaCoCo 리포트 (최신 API 사용 - afterEvaluate 문제 해결)
tasks.named('jacocoTestReport') {
    dependsOn tasks.test

    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }

    finalizedBy tasks.jacocoTestCoverageVerification
}

// JaCoCo 제외 패턴을 별도로 설정 (afterEvaluate 대신)
afterEvaluate {
    tasks.jacocoTestReport {
        def excludePatterns = [
                '**/dto/**',
                '**/config/**',
                '**/global/common/**',
                '**/*Application*',
                '**/exception/**',
                '**/Q*',
                '**/report/**',
                '**/fcm/**',
                '**/notification/**',
                '**/domain/**/entity/**',
                '**/event/**'
        ]

        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludePatterns)
        }))
    }
}

// 커버리지 검증 (현실적 기준)
tasks.named('jacocoTestCoverageVerification') {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            excludes = [
                    '**/domain/**/dto/**',
                    '**/config/**',
                    '**/global/report/**',
                    '**/global/common/**',
                    '**.*Application*',
                    '**/exception/**',
                    '**/Q*',
                    '**/report/**',
                    '**/fcm/**',
                    '**/notification/**',
                    '**/domain/**/entity/**',
                    '**/event/**'
            ]
        }
    }
}

// SonarQube 태스크 의존성 설정 (최신 API)
tasks.named('sonar') {
    dependsOn tasks.compileJava, tasks.compileTestJava, tasks.test, tasks.jacocoTestReport
}

// 커스텀 태스크들 (최신 Task API 사용)
tasks.register('testOnly') {
    group = 'verification'
    description = "테스트만 실행 (실패 무시)"
    dependsOn tasks.test

    doLast {
        def testResultsDir = layout.buildDirectory.dir("test-results/test").get().asFile
        if (testResultsDir.exists()) {
            def reportPath = layout.buildDirectory.file("reports/tests/test/index.html").get().asFile
            println "📊 테스트 결과: ${reportPath.absolutePath}"
        }
    }
}

tasks.register('coverageOnly') {
    group = 'verification'
    description = "커버리지 리포트만 생성"
    dependsOn tasks.test, tasks.jacocoTestReport

    doLast {
        def reportPath = layout.buildDirectory.file("jacocoReport/test/html/index.html").get().asFile
        println "📈 커버리지 리포트: ${reportPath.absolutePath}"
    }
}

tasks.register('coverageCheck') {
    group = 'verification'
    description = "커버리지 기준 체크"
    dependsOn tasks.test, tasks.jacocoTestReport, tasks.jacocoTestCoverageVerification
}

tasks.register('sonarAnalysis') {
    group = 'verification'
    description = "SonarQube 분석 실행"
    dependsOn tasks.compileJava, tasks.compileTestJava, tasks.test, tasks.jacocoTestReport, tasks.sonar
}

tasks.register('qualityReport') {
    group = 'verification'
    description = "품질 리포트 생성 (실패 무시)"

    dependsOn tasks.testOnly, tasks.coverageOnly

    doFirst {
        println "🔍 품질 리포트 생성 시작..."
    }

    doLast {
        def buildDir = layout.buildDirectory.get().asFile
        println ""
        println "📋 품질 리포트 생성 완료!"
        println "=" * 50
        println "📊 테스트 리포트: ${buildDir}/reports/tests/test/index.html"
        println "📈 커버리지 리포트: ${buildDir}/jacocoReport/test/html/index.html"
        println "🔍 SonarQube 대시보드: http://localhost:9000"
        println ""
        println "💡 다음 단계:"
        println "  1. 실패한 테스트 수정: ./gradlew test"
        println "  2. 커버리지 향상: ./gradlew coverageCheck"
        println "  3. SonarQube 분석: ./gradlew sonarAnalysis"
    }
}

tasks.register('deploymentCheck') {
    group = 'verification'
    description = "배포 전 품질 검사 (엄격한 기준)"

    dependsOn tasks.test, tasks.jacocoTestReport

    doFirst {
        println "🚀 배포 전 품질 검사 시작..."
    }

    doLast {
        def testResultsDir = layout.buildDirectory.dir("test-results/test").get().asFile

        if (!testResultsDir.exists()) {
            throw new GradleException("❌ 테스트 결과를 찾을 수 없습니다!")
        }

        def failedTests = fileTree(testResultsDir).matching {
            include "**/*.xml"
        }.collect { file ->
            def xml = new XmlSlurper().parse(file)
            return xml.@failures.toInteger() + xml.@errors.toInteger()
        }.sum()

        if (failedTests > 0) {
            throw new GradleException("❌ 테스트 실패로 배포 중단! 실패한 테스트: ${failedTests}개")
        }

        println "✅ 배포 품질 검사 통과!"
    }
}